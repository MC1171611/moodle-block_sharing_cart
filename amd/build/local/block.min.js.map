{"version":3,"file":"block.min.js","sources":["../../src/local/block.js"],"sourcesContent":["import {BaseComponent} from 'core/reactive';\nimport {get_string as getString} from 'core/str';\nimport {getCurrentCourseEditor} from \"core_courseformat/courseeditor\";\nimport BaseFactory from \"../app/factory\";\n\nexport default class Block extends BaseComponent {\n    /**\n     * @type {CourseElement}\n     */\n    course;\n\n    /**\n     * @type {BlockElement}\n     */\n    block;\n\n    /**\n     * @type {QueueElement}\n     */\n    queue;\n\n    /**\n     * Constructor hook.\n     * @param {Object} descriptor\n     */\n    create(descriptor) {\n        // Optional component name for debugging.\n        this.name = 'sharing_cart_block';\n        // Default query selectors.\n        this.selectors = {\n            COPY_SECTION_CONTAINER: '#copy_section_container',\n        };\n\n        this.canBackupUserdata = descriptor.canBackupUserdata ?? false;\n        this.canAnonymizeUserdata = descriptor.canAnonymizeUserdata ?? false;\n        this.showSharingCartBasket = descriptor.showSharingCartBasket ?? false;\n    }\n\n    /**\n     * Static method to create a component instance form the mustache template.\n     *\n     * @param {String} target\n     * @param {Boolean} canBackupUserdata\n     * @param {Boolean} canAnonymizeUserdata\n     * @param {Boolean} showSharingCartBasket\n     */\n    static init(target, canBackupUserdata, canAnonymizeUserdata, showSharingCartBasket) {\n        return new this({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            canBackupUserdata,\n            canAnonymizeUserdata,\n            showSharingCartBasket\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     */\n    stateReady() {\n        this.baseFactory = BaseFactory.make();\n        const {course, block, queue} = this.baseFactory.block().eventHandler().onLoad(\n            this.canBackupUserdata,\n            this.canAnonymizeUserdata,\n            this.showSharingCartBasket\n        );\n\n        this.course = course;\n        this.block = block;\n        this.queue = queue;\n\n        const courseContent = document.querySelector('.course-content');\n        if (courseContent) {\n            const sectionElements = courseContent.querySelectorAll('[data-for=\"section\"]');\n            sectionElements.forEach(sectionElement => {\n                const section = this.reactive.state.section.get(sectionElement.dataset.id);\n                this._refreshSection({element: section});\n            });\n\n            const courseModuleElements = courseContent.querySelectorAll('[data-for=\"cmitem\"]');\n            courseModuleElements.forEach(courseModuleElement => {\n                const courseModule = this.reactive.state.cm.get(courseModuleElement.dataset.id);\n                this._refreshCourseModule({element: courseModule});\n            });\n        }\n\n        const showCopySectionInBlockSegment = this.getElement(this.selectors.COPY_SECTION_CONTAINER);\n        if (showCopySectionInBlockSegment) {\n            this._refreshCopySectionOptions();\n\n            const select = showCopySectionInBlockSegment.querySelector('select');\n            const copySectionButton = showCopySectionInBlockSegment.querySelector('button');\n            copySectionButton.addEventListener('click', async () => {\n                await this.block.addSectionBackupToSharingCart(select.value);\n            });\n        }\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `section:created`, handler: this._refreshSection},\n            {watch: `section:updated`, handler: this._refreshSection},\n            {watch: `cm:created`, handler: this._refreshCourseModule},\n            {watch: `cm:updated`, handler: this._refreshCourseModule},\n        ];\n    }\n\n    async getBackupToSharingCartButton() {\n        if (!this._sharingCartButton) {\n            this._sharingCartButton = await this.baseFactory.moodle().template().createElementFromTemplate(\n                'block_sharing_cart/block/course/add_to_sharing_cart_button',\n                {}\n            );\n        }\n\n        return this._sharingCartButton.cloneNode(true);\n    }\n\n    async _refreshCopySectionOptions() {\n        const showCopySectionInBlockSegment = this.getElement(this.selectors.COPY_SECTION_CONTAINER);\n        if (!showCopySectionInBlockSegment) {\n            return;\n        }\n\n        const select = showCopySectionInBlockSegment.querySelector('select');\n        const selectedValue = select.value;\n\n        const noCourseModulesInSections = await getString('no_course_modules_in_section', 'block_sharing_cart');\n\n        const div = document.createElement('div');\n\n        const option = document.createElement('option');\n        option.disabled = true;\n        option.text = await getString('choosedots', 'core');\n        div.appendChild(option);\n\n        this.reactive.state.section.forEach((section) => {\n            const option = document.createElement('option');\n\n            const sectionIsEmpty = section.cmlist.length === 0;\n            if (sectionIsEmpty) {\n                option.disabled = true;\n                option.title = noCourseModulesInSections;\n            }\n\n            option.value = section.id;\n            option.text = section.title;\n            option.selected = Number.parseInt(section.id) === Number.parseInt(selectedValue);\n\n            div.appendChild(option);\n        });\n\n        select.innerHTML = div.innerHTML;\n    }\n\n    /**\n     * Refresh the section.\n     * @param {Object} param\n     * @param {Object} param.element\n     */\n    async _refreshSection({element}) {\n        this._refreshCopySectionOptions();\n\n        if (this.showSharingCartBasket) {\n            let backupButton = await this.getBackupToSharingCartButton();\n\n            const sectionTitle = document.querySelector(\n                '.course-content .course-section-header .inplaceeditable[data-itemid=\"' + element.id + '\"]'\n            );\n            if (sectionTitle) {\n                const hasBackupButton = sectionTitle.parentElement.querySelector('.add_to_sharing_cart');\n                if (!hasBackupButton) {\n                    sectionTitle.after(backupButton);\n\n                    backupButton.addEventListener(\n                        'click',\n                        (e) => {\n                            if (e.currentTarget.classList.contains('disabled')) {\n                                return;\n                            }\n\n                            this.block.addSectionBackupToSharingCart(element.id);\n                        }\n                    );\n                }\n\n                backupButton = sectionTitle.parentElement.querySelector('.add_to_sharing_cart');\n\n                const disabled = element.cmlist.length === 0;\n                backupButton.classList.toggle('disabled', disabled);\n                backupButton.title = disabled ?\n                    await getString('no_course_modules_in_section_description', 'block_sharing_cart') :\n                    '';\n            }\n        }\n    }\n\n    /**\n     * Refresh the course module.\n     * @param {Object} param\n     * @param {Object} param.element\n     */\n    async _refreshCourseModule({element}) {\n        if (this.showSharingCartBasket) {\n            const backupButton = await this.getBackupToSharingCartButton();\n\n            const courseModuleActionMenu = document.querySelector(\n                '.course-content .cm_action_menu[data-cmid=\"' + element.id + '\"]'\n            );\n            if (!courseModuleActionMenu) {\n                setTimeout(() => this._refreshCourseModule({element}), 100);\n                return;\n            }\n\n            const hasBackupButton = courseModuleActionMenu.querySelector('.add_to_sharing_cart');\n            if (!hasBackupButton) {\n                courseModuleActionMenu.append(backupButton);\n\n                backupButton.addEventListener(\n                    'click',\n                    this.block.addCourseModuleBackupToSharingCart.bind(this.block, element.id)\n                );\n            }\n        }\n    }\n}\n"],"names":["Block","BaseComponent","create","descriptor","name","selectors","COPY_SECTION_CONTAINER","canBackupUserdata","canAnonymizeUserdata","showSharingCartBasket","target","this","element","document","getElementById","reactive","stateReady","baseFactory","BaseFactory","make","course","block","queue","eventHandler","onLoad","courseContent","querySelector","querySelectorAll","forEach","sectionElement","section","state","get","dataset","id","_refreshSection","courseModuleElement","courseModule","cm","_refreshCourseModule","showCopySectionInBlockSegment","getElement","_refreshCopySectionOptions","select","addEventListener","async","addSectionBackupToSharingCart","value","getWatchers","watch","handler","_sharingCartButton","moodle","template","createElementFromTemplate","cloneNode","selectedValue","noCourseModulesInSections","div","createElement","option","disabled","text","appendChild","cmlist","length","title","selected","Number","parseInt","innerHTML","backupButton","getBackupToSharingCartButton","sectionTitle","parentElement","after","e","currentTarget","classList","contains","toggle","courseModuleActionMenu","setTimeout","append","addCourseModuleBackupToSharingCart","bind"],"mappings":"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"}